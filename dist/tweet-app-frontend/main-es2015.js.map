{"version":3,"sources":["./src/app/services/tweet.service.ts","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/reply-tweet/reply-tweet.component.ts","./src/app/reply-tweet/reply-tweet.component.html","./src/app/pipes/date-ago.pipe.ts","./src/environments/environment.ts","./src/app/reset/reset-pass/reset-pass.component.ts","./src/app/reset/reset-pass/reset-pass.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/user-list/user-list.component.html","./src/app/user-list/user-list.component.ts","./src/app/register/ConfirmedValidator.ts","./src/app/app.module.ts","./src/app/services/jwt.guard.ts","./src/app/navbar/navbar.component.ts","./src/app/navbar/navbar.component.html","./src/app/services/auth.service.ts","./src/app/tweet-list/tweet-list.component.ts","./src/app/tweet-list/tweet-list.component.html","./src/app/edit-tweet/edit-tweet.component.ts","./src/app/edit-tweet/edit-tweet.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/services/TokenInterceptor.ts","./src/app/services/ErrorInterceptor.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../interfaces/user';\nimport { Tweet } from '../interfaces/tweet';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TweetService {\n  constructor(private http: HttpClient) {}\n\n  getAllUsers() {\n    return this.http.get(environment.ApiUrl + '/users/all');\n  }\n\n  getUsersByUsername(username: string) {\n    return this.http.get(environment.ApiUrl + `/user/search/${username}`);\n  }\n\n  getAllTweetsByUsername(username: string) {\n    return this.http.get(environment.ApiUrl + `/${username}`);\n  }\n\n  getAllTweets() {\n    return this.http.get(environment.ApiUrl + '/all');\n  }\n\n  postTweet(tweet: Tweet, username: string) {\n    return this.http.post(environment.ApiUrl + `/${username}/add`, tweet);\n  }\n\n  likeTweet(tweetId: string, username: string) {\n    return this.http.put(\n      environment.ApiUrl + `/${username}/like/${tweetId}`,\n      null\n    );\n  }\n\n  deleteTweet(tweetId: string, username: string) {\n    return this.http.delete(\n      environment.ApiUrl + `/${username}/delete/${tweetId}`\n    );\n  }\n\n  updateTweet(tweet: Tweet, username: string) {\n    return this.http.put(\n      environment.ApiUrl + `/${username}/update/${tweet.id}`,\n      tweet\n    );\n  }\n\n  replyTweet(tweetId: string, tweet: Tweet, username: string) {\n    return this.http.post(\n      environment.ApiUrl + `/${username}/reply/${tweetId}`,\n      tweet\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../interfaces/user';\nimport { Router } from '@angular/router';\nimport { ConfirmedValidator } from './ConfirmedValidator';\n\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  submitted: boolean = false;\n  loading: boolean = false;\n  isEmailUnique: boolean = true;\n  isUsernameUnique: boolean = true;\n  success: boolean = false;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {\n    this.registerForm = this.formBuilder.group({\n      firstName: ['', [Validators.required,Validators.pattern('[A-ZA-z]{1,}')]],\n      lastName: ['', Validators.required],\n      username: ['', Validators.required],\n      password: ['', [Validators.required,Validators.minLength(6)]],\n      confirm_password: ['', [Validators.required]],\n      email: ['', [Validators.required,Validators.email]],\n      contactNumber: [\n        '',\n        [Validators.required, Validators.pattern('[6-9]{1}[0-9]{9}')],\n      ],\n    },{\n    validator: ConfirmedValidator('password', 'confirm_password')\n    });\n  }\n\n  get f() {\n    return this.registerForm.controls;\n  }\n  ngOnInit(): void {}\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.registerForm.invalid) {\n      return;\n    }\n    let user: User = {\n      id: null,\n      username: this.f.username.value,\n      password: this.f.password.value,\n      email: this.f.email.value,\n      firstName: this.f.firstName.value,\n      lastName: this.f.lastName.value,\n      contactNumber: this.f.contactNumber.value,\n    };\n    this.loading = true;\n    this.authService.register(user).subscribe(\n      (response: any) => {\n        this.loading = false;\n        if (response.username !== undefined) {\n            this.success = true;\n            this.router.navigateByUrl('login');\n        }\n      },\n      (err) => {\n        this.loading = false;\n        if (\n          err.message.includes('duplicate key') &&\n          err.message.includes('username')\n        ) {\n          this.isUsernameUnique = false;\n        }\n        if (\n          err.message.includes('duplicate key') &&\n          err.message.includes('email')\n        ) {\n          this.isEmailUnique = false;\n        }\n      }\n    );\n  }\n}\n","\n<div class=\"container-fluid px-1 px-md-5 px-lg-1 px-xl-5 py-5 mx-auto\">\n  <div class=\"card card0 border-0\">\n    <div class=\"row d-flex\">\n      <div class=\"col-lg-5\">\n        <div class=\"card1 pb-6\">\n          <div class=\"row\">\n            <img src=\"../../assets/logo.png\" class=\"logo\">\n          </div>\n          <div class=\"row px-3 justify-content-center mt-4 mb-5 border-line\">\n            <img src=\"../../assets/registerPage.png\" class=\"image\">\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-6\">\n        <div class=\"card2 card border-0 px-4 py-5\">\n          <div class=\"row mb-4 px-3\">\n            <h2 class=\"mb-0 mr-4 mt-2\">Please Register Here</h2>\n          </div>\n          <div class=\"row px-3 mb-4\">\n            <div class=\"line\"></div>\n            <small class=\"or text-center\">Register</small>\n            <div class=\"line\"></div>\n          </div>\n          <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n              <!-- <label for=\"firstName\">First Name</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"firstName\"\n                class=\"form-control\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\"\n                placeholder=\"First Name\"\n              />\n              <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.firstName.errors.required\">\n                  First Name is required\n                </div>\n                <div *ngIf=\"f.firstName.errors.pattern\">\n                  Name only accpect Alphabetic charactor.\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"lastName\">Last Name</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"lastName\"\n                class=\"form-control\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\"\n                placeholder=\"Last Name\"\n              />\n              <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"username\">Username</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"username\"\n                class=\"form-control\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\"\n                placeholder=\"Username\"\n              />\n              <div\n                *ngIf=\"submitted && (f.username.errors || !isUsernameUnique)\"\n                class=\"invalid-feedback\">\n                <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                <div *ngIf=\"!isUsernameUnique\">Username already exists</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"password\">Password</label> -->\n              <input\n                type=\"password\"\n                formControlName=\"password\"\n                class=\"form-control\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\n                placeholder=\"Password\"\n              />\n              <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                <div *ngIf=\"f.password.errors?.minlength\">Minium Password length is 6</div>\n              </div>\n            </div>\n            <!-- Confirm Password -->\n            <div class=\"form-group\">\n              <!-- <label for=\"confirm_password\">Confirm Password</label> -->\n              <input \n                  formControlName=\"confirm_password\"\n                  id=\"confirm_password\" \n                  type=\"password\" \n                  placeholder=\"Confirm Password\"\n                  class=\"form-control\">\n              <div *ngIf=\"f.confirm_password.touched && f.confirm_password.invalid\" class=\"alert alert-danger\">\n                  <div *ngIf=\"f.confirm_password.errors.required\">Confirm Password is required.</div>\n                  <div *ngIf=\"f.confirm_password.errors.confirmedValidator\">Password and Confirm Password must be match.</div>\n              </div>\n          </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"email\">Email</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"email\"\n                class=\"form-control\"\n                placeholder=\"Email\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"\n              />\n              <div\n                *ngIf=\"submitted && (f.email.errors || !isEmailUnique)\"\n                class=\"invalid-feedback\"\n              >\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                <div *ngIf=\"!isEmailUnique\">Email already exists</div>\n                <div *ngIf=\"f.email.errors.email\">Please enter valide Email</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"contact-number\">Contact Number</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"contactNumber\"\n                class=\"form-control\"\n                placeholder=\"Contact Number\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.contactNumber.errors }\"\n              />\n              <div\n                *ngIf=\"submitted && f.contactNumber.errors\"\n                class=\"invalid-feedback\"\n              >\n                <div *ngIf=\"f.contactNumber.errors.required\">\n                  Contact Number is required\n                </div>\n                \n                <div *ngIf=\"f.contactNumber.errors.pattern\">\n                  Contact Number can only be a 10 digit number\n                              </div>\n              </div>\n            </div>\n            <div *ngIf=\"success\" class=\"text-success mb-3\">\n              Registered successfully!\n            </div>\n            <div class=\"form-group\">\n              <button [disabled]=\"loading\" class=\"btn btn-blue\">\n                <span\n                  *ngIf=\"loading\"\n                  class=\"spinner-border spinner-border-sm mr-1\"\n                ></span>\n                Register \n              </button>\n              <a routerLink=\"../login\" class=\"text-info\">Cancel</a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"bg-blue py-4\">\n      <div class=\"row px-3\">\n        <small class=\"ml-4 ml-sm-5 mb-2\">Copyright &copy; 2022. All rights reserved.</small>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-reply-tweet',\n  templateUrl: './reply-tweet.component.html',\n  styleUrls: ['./reply-tweet.component.css']\n})\nexport class ReplyTweetComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>reply-tweet works!</p>\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'dateAgo',\n  pure: true,\n})\nexport class DateAgoPipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    if (value) {\n      const seconds = Math.floor((+new Date() - +new Date(value)) / 1000);\n      if (seconds < 29)\n        // less than 30 seconds ago will show as 'Just now'\n        return 'Just now';\n      const intervals = {\n        year: 31536000,\n        month: 2592000,\n        week: 604800,\n        day: 86400,\n        hour: 3600,\n        minute: 60,\n        second: 1,\n      };\n      let counter;\n      for (const i in intervals) {\n        counter = Math.floor(seconds / intervals[i]);\n        if (counter > 0)\n          if (counter === 1) {\n            return counter + ' ' + i + ' ago'; // singular (1 day ago)\n          } else {\n            return counter + ' ' + i + 's ago'; // plural (2 days ago)\n          }\n      }\n    }\n    return value;\n  }\n}\n","\nexport const environment = {\n  production: false,\n  ApiUrl: \"http://Tweetapp-env.eba-fhj22csk.ap-south-1.elasticbeanstalk.com/api/v1.0/tweets\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { User } from 'src/app/interfaces/user';\nimport { ConfirmedValidator } from 'src/app/register/ConfirmedValidator';\n@Component({\n  selector: 'app-reset-pass',\n  templateUrl: './reset-pass.component.html',\n  styleUrls: ['./reset-pass.component.css']\n})\nexport class ResetPassComponent implements OnInit {\n  resetSubmitted: boolean;\n  loading: boolean;\n\n  constructor( private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router) { }\n  resetPasswordForm: FormGroup;\n  submitted: boolean = false;\n  resetPasswordValue: string;\n  currentUser: User;\n  invalid = false;\n  passwordResetComplete: boolean = false;\n  ngOnInit(): void {\n    this.currentUser = this.authService.getCurrentUser();\n    this.resetPasswordForm = this.formBuilder.group({\n      password: ['', [Validators.required,Validators.minLength(6)]],\n      confirm_password: ['', [Validators.required]]\n    },\n    { \n      validator: ConfirmedValidator('password', 'confirm_password')\n    }\n    );\n  }\n  get f() {\n    return this.resetPasswordForm.controls;\n  }\n  getPassword() {\n    return this.resetPasswordForm.get('password').value;\n  }\n  onSubmit() {\n    console.log('Submitted');\n    this.submitted = true;\n    if (this.resetPasswordForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authService\n      .resetPassword( this.currentUser.username,this.getPassword())\n        .subscribe((data: any) => {\n          this.loading=false;\n          if (\n            (data.resetStatus !== undefined || data.resetStatus !== null) &&\n            data.resetStatus == 'success'\n          ) {\n            \n           if (confirm(\"Password reset done please login again\")){\n              this.authService.setCurrentUser(null);\n            }\n            this.authService.setCurrentUser(null);\n            this.router.navigate([''])\n          }\n          this.passwordResetComplete = true;\n        });\n  }\n}\n","<div class=\"col-md-4 offset-md-4 mt-5\">\n    <div class=\"card\">\n      <h4 class=\"card-header\" style=\" background: #79a9e0;\">Password Reset</h4>\n      <div class=\"card-body\">\n        <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input\n              type=\"password\"\n              formControlName=\"password\"\n              class=\"form-control\"\n              [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\n            />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\n              <div *ngIf=\"f.password.errors?.minlength\">Minium Password length is 6</div>\n            </div>\n          </div>\n          <!-- Confirm Password -->\n          <div class=\"form-group\">\n            <label for=\"confirm_password\">Confirm Password</label>\n            <input \n                formControlName=\"confirm_password\"\n                id=\"confirm_password\" \n                type=\"password\" \n                class=\"form-control\">\n            <div *ngIf=\"f.confirm_password.touched && f.confirm_password.invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f.confirm_password.errors.required\">Confirm Password is required.</div>\n                <div *ngIf=\"f.confirm_password.errors.confirmedValidator\">Password and Confirm Password must be match.</div>\n            </div>\n        </div>\n          <div *ngIf=\"invalid\" class=\"mb-3 text-danger\">User does not exist!</div>\n          <div class=\"form-group\">\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\n              <span\n                *ngIf=\"loading\"\n                class=\"spinner-border spinner-border-sm mr-1\"\n              ></span>\n              Reset\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tweet App';\n}\n","<router-outlet></router-outlet>\n   ","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n    </div>\n    <div class=\"col-md-9\">\n      <div class=\"row row-col-4 g-4\">\n        <div *ngFor=\"let user of userList\">\n          <div class=\"card ml-5 col mt-3\" style=\"width: 18rem\">\n            <img  src=\"https://img.icons8.com/officel/80/000000/test-account.png\" [ngClass]=\"user.username == currentUser.username ?'card-img-top':'card-img-top grayscale'\" alt=\"...\" />\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">\n                <a\n                  class=\"link-primary\"\n                  [routerLink]=\"['/tweets', user.username]\"\n                  >{{ user.username }}</a\n                >\n              </h5>\n              <div class=\"card-text\">\n                <ul>\n                  <li>{{ user.email }}</li>\n                  <!-- <li>{{ user.contactNumber }}</li> -->\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n  Form,\n} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../interfaces/user';\nimport { Tweet } from '../interfaces/tweet';\nimport { Router } from '@angular/router';\nimport { TweetService } from '../services/tweet.service';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.css'],\n})\nexport class UserListComponent implements OnInit {\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private tweetService: TweetService\n  ) {}\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('login');\n    }\n    this.currentUser = this.authService.getCurrentUser();\n    this.tweetService\n      .getAllUsers()\n      .subscribe((data: any) => (this.userList = data));\n  }\n\n  currentUser: User;\n  userList: User[];\n}\n","import { FormGroup } from '@angular/forms';\r\n    \r\nexport function ConfirmedValidator(controlName: string, matchingControlName: string){\r\n    return (formGroup: FormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n        if (matchingControl.errors && !matchingControl.errors.confirmedValidator) {\r\n            return;\r\n        }\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ confirmedValidator: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { TweetListComponent } from './tweet-list/tweet-list.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { DateAgoPipe } from './pipes/date-ago.pipe';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { ResetPassComponent } from './reset/reset-pass/reset-pass.component';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDividerModule } from '@angular/material/divider';\nimport {MatFormFieldModule, MAT_FORM_FIELD_DEFAULT_OPTIONS} from '@angular/material/form-field';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n\nimport { TokenInterceptor } from './services/TokenInterceptor';\nimport { ErrorInterceptor } from './services/ErrorInterceptor';\nimport { EditTweetComponent } from './edit-tweet/edit-tweet.component';\nimport { ReplyTweetComponent } from './reply-tweet/reply-tweet.component';\nimport { MatDialogModule, MAT_DIALOG_DEFAULT_OPTIONS } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    TweetListComponent,\n    DateAgoPipe,\n    UserListComponent,\n    ResetPassComponent,\n    EditTweetComponent,\n    ReplyTweetComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDividerModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    \n    \n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n    {provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}},\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'fill'}}\n\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, CanActivateChild, CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtGuard implements CanActivate, CanActivateChild, CanDeactivate<unknown> {\n\n  // using this we can navigate on error\n  constructor(private router : Router,private authService:AuthService) { }\n\n  canActivate(route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree \n  {  return true;\n      // if(this.authService.isLoggedIn)\n      //   return true;\n      // else {\n      //   alert('You need to login first');\n      //   this.router.navigate(['/login'])\n      //   return false;\n      // }\n  \n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n  canDeactivate(\n    component: unknown,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState?: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n  \n}\n","import { EventEmitter, OnInit, Output } from '@angular/core';\nimport { User } from '../interfaces/user';\nimport { AuthService } from '../services/auth.service';\nimport { Component, ViewChild } from '@angular/core';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { delay, filter } from 'rxjs/operators';\nimport { NavigationEnd, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css'],\n})\nexport class NavbarComponent implements OnInit {\n\n  @ViewChild(MatSidenav)\n  sidenav!: MatSidenav;\n  \n  currentUser: User|undefined;\n  \n  constructor(private authService:AuthService,private router:Router,private observer: BreakpointObserver) {}\n\n  username=sessionStorage.getItem(\"username\");\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('login');\n    }\n    this.currentUser = this.authService.getCurrentUser();\n  }\n\n  ngAfterViewInit() {\n    this.observer.observe(['(max-width: 800px)']).subscribe((res) => {\n      if (res.matches) {\n        this.sidenav.mode = 'over';\n        this.sidenav.close();\n      } else {\n        this.sidenav.mode = 'side';\n        this.sidenav.open();\n      }\n    });\n  }\n\n  doLogOut()\n  {\n    this.authService.setCurrentUser(null);\n    this.router.navigateByUrl(\"/\");\n  }\n}\n","<mat-toolbar class=\"mat-elevation-z8\">\n  <button mat-icon-button (click)=\"sidenav.toggle()\">\n    <mat-icon *ngIf=\"!sidenav.opened\">\n        menu\n    </mat-icon>\n    <mat-icon *ngIf=\"sidenav.opened\">\n        close\n    </mat-icon>\n</button>\n \n  <div class=\"row\">\n    <div class=\"column\">\n      <div class=\"icon-text\">\n        <button mat-button class=\"menu-button\" routerLink=\"/home\">\n         \n          <img class=\"logo\" src=\"../../assets/logo.png\"/>\n          <span class=\"name\">Tweet App</span>\n        </button>\n      </div>\n    </div>\n    <div class=\"column\" style=\"display: flex; justify-content: flex-end\">\n\n      <div class=\"icon-text\" style=\"display: flex; justify-content: flex-end\">\n        <button mat-button class=\"menu-button\" >\n          <mat-icon>chat</mat-icon>\n          <span class=\"name\"><a routerLink=\"tweets/all\" style=\" color: #000000;\">Tweets</a></span>\n        </button>\n      </div>\n    </div>\n    <div class=\"column\" style=\"display: flex; justify-content: flex-end\">\n      <div class=\"icon-text\" style=\"display: flex; justify-content: flex-end\">\n        <button mat-button class=\"menu-button\">\n          <mat-icon>supervisor_account</mat-icon>\n          <span class=\"name\"><a routerLink=\"user-list\" style=\" color: #000000;\">Users</a></span>\n        </button>\n      </div>\n    </div>\n  </div>\n</mat-toolbar>\n\n<mat-sidenav-container>\n  <mat-sidenav  #sidenav=\"matSidenav\"  class=\"mat-elevation-z8\" >\n    <img class=\"avatar mat-elevation-z8\" src=\"https://img.icons8.com/plumpy/96/000000/test-account.png\" />\n    <h4 class=\"name\">{{currentUser.username}}</h4>\n    <mat-divider></mat-divider>\n    <button mat-button class=\"menu-button\">\n      <mat-icon>person</mat-icon>\n      <span class=\"name\">{{currentUser.firstName}},{{currentUser.lastName}}</span>\n    </button>\n    <button mat-button class=\"menu-button\">\n      <mat-icon>phone</mat-icon>\n      <span class=\"name\">+91 {{currentUser.contactNumber}}</span>\n    </button>\n    <button mat-button class=\"menu-button\">\n      <mat-icon>email</mat-icon>\n      <span class=\"name\">{{currentUser.email}}</span>\n    </button>\n    <mat-divider></mat-divider>\n\n    <button mat-button class=\"menu-button\">\n      <mat-icon>https</mat-icon>\n      <span>\n        <a routerLink=\"passwordReset/{{currentUser.username}}\">Reset Password</a></span>\n    </button>\n    <button mat-button class=\"menu-button\">\n      <mat-icon>logout</mat-icon>\n      <span>\n        <a routerLink=\"logout\" (click)=\"doLogOut()\" aria-hidden=\"true\">Logout</a></span>\n    </button>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <div class=\"content mat-elevation-z8\">\n      <router-outlet></router-outlet>\n    </div>\n  </mat-sidenav-content>\n  <mat-sidenav-container>","import { Injectable } from '@angular/core';\nimport { User } from '../interfaces/user';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport { userResponse } from '../interfaces/userResponse';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  \n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\npublic get currentUserValue(): User {\n    return this.currentUserSubject.value;\n}\n  private currentUserSubject: BehaviorSubject<User>;\n  public currentUser: Observable<User>;\n\n  private token:string;\n\n  forgotPassword(username: string) {\n    return this.http.get(environment.ApiUrl + `/${username}/forgot`);\n  }\n  resetPassword(username: string, password: string){\n    return this.http.post(environment.ApiUrl + '/reset', {\n      username,\n      password,\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('currentUser'));\n  }\n\n  setCurrentUser(user: User) {\n    if (user == null) {\n      localStorage.removeItem('currentUser');\n      return;\n    }\n    localStorage.setItem('currentUser', JSON.stringify(user));\n  }\n\n  isLoggedIn() {\n    if (localStorage.getItem('currentUser') != null) {\n      return true;\n    }\n    return false;\n  }\n\n\n\n  // login(username: string, password: string) {\n\n  //   return this.http.post(environment.ApiUrl + '/login', { username,password});\n\n  // }\n\n  login(username: string, password: string) {\n    return this.http.post<any>(environment.ApiUrl+'/login', { username, password })\n        .pipe(map(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('currentUser', JSON.stringify(user));\n            console.log(user);\n            console.log(\"---\"+user.token);\n            this.token=user.token;\n            this.currentUserSubject.next(user);\n            return user;\n        }));\n  }\n\n  getToken(){\n    return this.token;\n  }\nlogout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n}\n\n  register(user: User) {\n    return this.http.post(environment.ApiUrl + '/register', user);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n  Form,\n} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../interfaces/user';\nimport { Tweet } from '../interfaces/tweet';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { TweetService } from '../services/tweet.service';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { EditTweetComponent } from '../edit-tweet/edit-tweet.component';\ndeclare var $: any;\n\n@Component({\n  selector: 'app-tweet-list',\n  templateUrl: './tweet-list.component.html',\n  styleUrls: ['./tweet-list.component.css'],\n})\nexport class TweetListComponent implements OnInit {\n  tweetForm: FormGroup;\n  loading: boolean = false;\n  submitted: boolean = false;\n  editSubmitted: boolean = false;\n  replySubmitted: boolean = false;\n  currentUser: User;\n  tweetList: Tweet[] = [];\n  replyTweetForm: FormGroup;\n  editTweetForm: FormGroup;\n  currentTweet: Tweet = {\n    id: null,\n    tweetName: null,\n    postDate: null,\n    likes: 0,\n    user: null,\n    replies: null,\n    tweetTag: null,\n  };\n  addTagClicked: boolean = false;\n  currentRouteUsername: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private tweetService: TweetService,\n    private route: ActivatedRoute,\n    private dialog:MatDialog,\n  ) {}\n\n  addTag() {\n    this.addTagClicked = true;\n  }\n\n  removeTag() {\n    this.addTagClicked = false;\n  }\n\n  likeTweet(tweetId: string) {\n    this.tweetService\n      .likeTweet(tweetId, this.currentUser.username)\n      .subscribe((data: any) => {\n        this.refreshTweets();\n      });\n  }\n\n  deleteTweet(tweetId: string) {\n    this.tweetService\n      .deleteTweet(tweetId, this.currentUser.username)\n      .subscribe((data: any) => this.refreshTweets());\n  }\n\n  openEditTweetPopup(tweet: Tweet) {\n    this.currentTweet = tweet;\n    console.log(\"current tweet:\",this.currentTweet);\n    console.log(\"tweet: \",tweet);\n    $('#editModal').appendTo(\"body\").modal('show');\n\n    //for Mat Dialog\n    // const editDialogconfig=new MatDialogConfig();\n    // editDialogconfig.disableClose=true;\n    // editDialogconfig.autoFocus=true;\n    // editDialogconfig.data=tweet;\n\n    // const editDialogRef=this.dialog.open(EditTweetComponent,editDialogconfig)\n\n    // editDialogRef.afterClosed().subscribe(\n    //   editDate=>console.log(\"from dialog \",editDate)\n      \n    // )\n\n  }\n  openReplyTweetPopup(tweet: Tweet) {\n    this.currentTweet = tweet;\n    $('#replyModal').appendTo(\"body\") .modal('show');\n  }\n\n  editTweetSubmit() {\n    this.editSubmitted = true;\n    this.currentTweet.tweetName = this.editTweetForm.controls.tweetBody.value;\n    this.tweetService\n      .updateTweet(this.currentTweet, this.currentUser.username)\n      .subscribe((data: any) => {\n        this.refreshTweets();\n        this.currentTweet = {\n          id: null,\n          tweetName: null,\n          postDate: null,\n          likes: 0,\n          user: null,\n          replies: null,\n          tweetTag: null,\n        };\n        $('#editModal').modal('hide');\n        this.addTagClicked = false;\n      });\n  }\n\n  replyTweetSubmit() {\n    this.replySubmitted = true;\n    let now = new Date();\n    let replyTweet: Tweet = {\n      id: null,\n      tweetName: this.replyTweetForm.controls.tweetBody.value,\n      postDate: new Date(\n        now.getTime() - now.getTimezoneOffset() * 60000\n      ).toISOString(),\n      likes: null,\n      user: this.currentUser,\n      replies: null,\n      tweetTag: this.replyTweetForm.controls.tweetTag.value,\n    };\n    this.tweetService\n      .replyTweet(this.currentTweet.id, replyTweet, this.currentUser.username)\n      .subscribe((data: any) => {\n        this.refreshTweets();\n        this.currentTweet = {\n          id: null,\n          tweetName: null,\n          postDate: null,\n          likes: 0,\n          user: null,\n          replies: null,\n          tweetTag: null,\n        };\n        $('#replyModal').modal('hide');\n        this.addTagClicked = false;\n      });\n  }\n\n  refreshTweets() {\n    this.tweetList.splice(0);\n    if (this.currentRouteUsername === null) {\n      this.tweetService.getAllTweets().subscribe((data: any) => {\n        this.tweetList.push(...data);\n      });\n    } else {\n      this.tweetService\n        .getAllTweetsByUsername(this.currentRouteUsername)\n        .subscribe((data: any) => {\n          this.tweetList.push(...data);\n        });\n    }\n    console.log(this.tweetList);\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    this.loading = true;\n    let tweet: Tweet = {\n      id: null,\n      tweetName: this.f.tweetBody.value,\n      postDate: null,\n      likes: 0,\n      user: null,\n      replies: [],\n      tweetTag: this.f.tweetTag.value,\n    };\n    this.tweetService.postTweet(tweet, this.currentUser.username).subscribe(\n      (data: any) => {\n        if (data.id !== undefined) {\n          this.refreshTweets();\n          console.log(this.tweetList);\n          this.addTagClicked = false;\n        }\n        this.loading = false;\n      },\n      (err) => {\n        this.loading = false;\n      }\n    );\n\n    console.log('x');\n  }\n  trackTweet(index: number, tweet: Tweet) {\n    return tweet.id;\n  }\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('login');\n    }\n    this.currentUser = this.authService.getCurrentUser();\n    this.tweetForm = this.formBuilder.group({\n      tweetBody: ['', [Validators.required, Validators.maxLength(144)]],\n      tweetTag: ['', Validators.maxLength(50)],\n    });\n    this.replyTweetForm = this.formBuilder.group({\n      tweetBody: ['', [Validators.required, Validators.maxLength(144)]],\n      tweetTag: ['', Validators.maxLength(50)],\n    });\n    this.editTweetForm = this.formBuilder.group({\n      tweetBody: ['', [Validators.required, Validators.maxLength(144)]],\n    });\n    this.currentRouteUsername = this.route.snapshot.paramMap.get('username');\n    if (this.currentRouteUsername === null) {\n      this.tweetService.getAllTweets().subscribe((data: any) => {\n        this.tweetList = data;\n      });\n    } else {\n      this.tweetService\n        .getAllTweetsByUsername(this.currentRouteUsername)\n        .subscribe((data: any) => {\n          this.tweetList = data;\n        });\n    }\n  }\n\n  get f() {\n    return this.tweetForm.controls;\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <!-- Nav Bar Component -->\n    <div class=\"col-md-1\"></div>\n    <div class=\"col-md-7\">\n      <div class=\"row\">\n        <div class=\"card mb-2 mt-3 w-100\">\n          <h4 class=\"card-header\" style=\" background: #79a9e0;\">Post something here..</h4>\n          <div class=\"card-body\">\n            <form [formGroup]=\"tweetForm\" (ngSubmit)=\"onSubmit()\">\n              <div class=\"form-group\">\n                <textarea formControlName=\"tweetBody\" class=\"form-control\"\n                  [ngClass]=\"{ 'is-invalid': submitted && f.tweetBody.errors }\"></textarea>\n                <div *ngIf=\"submitted && f.tweetBody.errors\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f.tweetBody.errors.required\">\n                    Tweet text is required\n                  </div>\n                  <div *ngIf=\"f.tweetBody.errors.maxlength\">\n                    Tweet content cannot exceed 144 characters!\n                  </div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <button [disabled]=\"loading\" type=\"submit\" class=\"btn btn-outline-primary\">\n                  <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                  Post\n                </button>\n                <span class=\"float-right\" *ngIf=\"!addTagClicked\">\n                  <button class=\"btn btn-secondary\" (click)=\"addTag()\">\n                    Tag\n                  </button>\n                </span>\n                <span class=\"float-right\" *ngIf=\"addTagClicked\">\n                  <button class=\"btn btn-outline-danger btn-sm float-right ml-3\" (click)=\"removeTag()\">\n                    X\n                  </button>\n                  <input type=\"text\" formControlName=\"tweetTag\" [ngClass]=\"{\n                      'is-invalid': submitted && f.tweetTag.errors\n                    }\" />\n                </span>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n      <!-- Post tweet Chat -->\n     \n        <div class=\"row row-cols-1\" *ngFor=\"let tweet of tweetList; trackBy: trackTweet\">\n          \n            <div class=\"entete card w-100 h-100\">\n              <div class=\"row no-gutters\">\n                <div class=\"col-md-2\">\n                  <img src=\"../../assets/icon.png\"\n                    [ngClass]=\"tweet.user.username == currentUser.username ?'card-img':'card-img grayscale'\"\n                    alt=\"...\" />\n                </div>\n                <div class=\"col-md-10\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">\n                      {{ tweet.user.username }}\n                      <span class=\"float-right\" *ngIf=\"tweet.user.username == currentUser.username\">\n                        <button class=\"btn btn-outline-dark ml-2\" (click)=\"openEditTweetPopup(tweet)\">\n                          <i class=\"fa fa-edit\"></i></button><button class=\"btn btn-outline-danger ml-2\"\n                          (click)=\"deleteTweet(tweet.id)\">\n                          <i class=\"fa fa-trash\"></i></button></span>\n                    </h5>\n\n                    <p class=\"card-text\">\n                      {{ tweet.tweetName }}\n\n                      <small class=\"text-muted\" *ngIf=\"tweet.tweetTag != null\">#{{ tweet.tweetTag }}</small>\n                    </p>\n                  </div>\n                  <div class=\"card-footer mt-auto\">\n                    <p class=\"card-text\">\n                      <small class=\"text-muted\">{{\n                        tweet.postDate | dateAgo\n                        }}</small>\n\n                      <span class=\"ml-3 float-right\">\n                        <button class=\"btn btn-outline-primary\" (click)=\"likeTweet(tweet.id)\">\n                          <i class=\"fa fa-thumbs-up\"> {{ tweet.likes }} </i>\n                        </button>\n                        <button class=\"btn btn-outline-info ml-2\" (click)=\"openReplyTweetPopup(tweet)\">\n                          <i class=\"fa fa-reply\"></i>\n                        </button>\n                      </span>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n       \n          <!-- reply chat -->\n          \n            <div class=\"row row-cols-1\" *ngIf=\"tweet.replies.length > 0\">\n              <div class=\"row w-100\" *ngFor=\"let replyTweet of tweet.replies\">\n                <div class=\"card mb-2 mt-2 w-75 ml-auto\">\n                  <div class=\"row no-gutters\">\n                    <div class=\"col-md-2\">\n                      <img src=\"../../assets/icon.png\" class=\"card-img grayscale\" alt=\"...\" />\n                    </div>\n                    <div class=\"col-md-10\">\n                      <div class=\"card-body\">\n                        <h5 class=\"card-title\">@{{ replyTweet.user.username }}</h5>\n\n                        <p class=\"card-text\">\n                          {{ replyTweet.tweetName }}\n                          <small class=\"text-muted\" *ngIf=\"replyTweet.tweetTag != null\">#{{ replyTweet.tweetTag\n                            }}</small>\n                        </p>\n                        <p class=\"card-text\">\n                          <small class=\"text-muted\">{{\n                            replyTweet.postDate | dateAgo\n                            }}</small>\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          \n        </div>\n     \n    </div>\n    <div class=\"col-md-1\"></div>\n  </div>\n</div>\n\n<!-- edit tweet -->\n<div class=\"modal fade\" id=\"editModal\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\" style=\" background: #79a9e0;\">\n        <h5 class=\"modal-title\">Edit Tweet</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"></button>\n      </div>\n      <form [formGroup]=\"editTweetForm\" (ngSubmit)=\"editTweetSubmit()\">\n        <div class=\"modal-body\">\n          <textarea placeholder=\"{{ currentTweet.tweetName }}\" class=\"w-100\" formControlName=\"tweetBody\" [ngClass]=\"{\n              'is-invalid':\n                editSubmitted && editTweetForm.controls.tweetBody.errors\n            }\"></textarea>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">\n            Close\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\">Save changes</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n\n<!-- reply tweet -->\n<div class=\"modal fade\" id=\"replyModal\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\" style=\" background: #79a9e0;\">\n        <h5 class=\"modal-title\">Reply Tweet</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"></button>\n      </div>\n      <form [formGroup]=\"replyTweetForm\" (ngSubmit)=\"replyTweetSubmit()\">\n        <div class=\"modal-body\">\n          <p>{{ currentTweet.tweetName }}</p>\n          <textarea placeholder=\"Your reply here...\" class=\"w-100\" formControlName=\"tweetBody\" [ngClass]=\"{\n              'is-invalid':\n                replySubmitted && replyTweetForm.controls.tweetBody.errors\n            }\"></textarea>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"removeTag()\">\n            Close\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\">Reply</button>\n          <span class=\"float-right\" *ngIf=\"!addTagClicked\">\n            <button class=\"btn btn-primary\" (click)=\"addTag()\">Tag</button>\n          </span>\n          <span class=\"float-right\" *ngIf=\"addTagClicked\">\n            <button class=\"btn btn-outline-danger btn-sm float-right ml-3\" (click)=\"removeTag()\">\n              X\n            </button>\n            <input type=\"text\" formControlName=\"tweetTag\" [ngClass]=\"{\n                'is-invalid':\n                  replySubmitted && replyTweetForm.controls.tweetTag.errors\n              }\" />\n          </span>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tweet } from '../interfaces/tweet';\nimport { User } from '../interfaces/user';\nimport { AuthService } from '../services/auth.service';\nimport { TweetService } from '../services/tweet.service';\n\n@Component({\n  selector: 'app-edit-tweet',\n  templateUrl: './edit-tweet.component.html',\n  styleUrls: ['./edit-tweet.component.css']\n})\nexport class EditTweetComponent implements OnInit {\n\n\n  // editSubmitted: boolean = false;\n   currentUser: User;\n  tweetList: Tweet[] = [];\n  currentTweet: Tweet = {\n    id: null,\n    tweetName: null,\n    postDate: null,\n    likes: 0,\n    user: null,\n    replies: null,\n    tweetTag: null,\n  };\n  editTweetForm: FormGroup;\n  // addTagClicked: boolean = false;\n  // currentRouteUsername: string;\n\n  constructor(public editDialogRef:MatDialogRef<EditTweetComponent>,\n    @Inject(MAT_DIALOG_DATA) public data:Tweet,\n    private formBuilder: FormBuilder,\n    private tweetService: TweetService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    ) {}\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('login');\n    }\n    this.currentUser = this.authService.getCurrentUser();\n    this.editTweetForm = this.formBuilder.group({\n      tweetBody: ['', [Validators.required, Validators.maxLength(144)]],\n    });\n  }\n\n  onCloseClick(): void {\n    this.editDialogRef.close();\n  }\n\n  save() {\n    this.editDialogRef.close(this.editTweetForm.value);\n  }\n  get f() {\n    return this.editTweetForm.controls;\n  }\n}\n","<h2 mat-dialog-title>Edit Tweet</h2>\n\n<mat-dialog-content [formGroup]=\"editTweetForm\">\n  \n    <mat-form-field>\n        <textarea matInput\n                placeholder=\"{{data.tweetName}}\"\n               formControlName=\"tweetBody\"></textarea>\n\n    </mat-form-field>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\"(click)=\"onCloseClick()\">Close</button>\n    <button class=\"mat-raised-button mat-primary\"(click)=\"save()\">Save</button>\n</mat-dialog-actions>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ResetPassComponent } from './reset/reset-pass/reset-pass.component';\nimport { TweetListComponent } from './tweet-list/tweet-list.component';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { JwtGuard } from './services/jwt.guard';\n\n\nconst routes: Routes = [\n  { \n    path:\"\" , \n    redirectTo: \"/login\",\n    pathMatch:\"full\"\n  },\n  { \n    path: 'login', \n    component: LoginComponent \n  },\n  { \n    path: \"login/register\", \n    redirectTo: \"register\",\n    pathMatch: \"full\"\n  },\n  { \n    path: 'register', \n    component: RegisterComponent \n  },\n  { \n    path: 'home', \n    component: NavbarComponent,\n    canActivate:[JwtGuard],\n    children : \n    [\n      { \n        path:\"\" , \n        component: TweetListComponent,\n        canActivate:[JwtGuard],\n      },\n      {\n        path:\"tweets/all\",\n        component: TweetListComponent,\n        canActivate:[JwtGuard],\n      },\n      {\n        path: \"logout\",\n        redirectTo:\"/login\",\n        pathMatch:\"full\"\n        \n      },\n      { \n        path: 'user-list', \n        component: UserListComponent,\n        canActivate:[JwtGuard],\n      },\n      { \n        path: 'passwordReset/:username', \n        component: ResetPassComponent,\n        canActivate:[JwtGuard],\n      },\n    ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../interfaces/user';\nimport { Router } from '@angular/router';\ndeclare var $: any;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n  loginForm: FormGroup;\n  submitted: boolean = false;\n  resetSubmitted: boolean = false;\n  loading: boolean = false;\n  currentUser: User;\n  invalid = false;\n  resetPasswordForm: FormGroup;\n  resetPasswordValue: string;\n  passwordResetComplete: boolean = false;\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('home');\n    }\n\n    this.loginForm = this.formBuilder.group({\n      userName: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n\n    this.resetPasswordForm = this.formBuilder.group({\n      username: ['', Validators.required],\n    });\n  }\n\n  resetPasswordSubmit() {\n    this.resetSubmitted = true;\n    this.authService\n      .forgotPassword(this.resetPasswordForm.controls.username.value)\n      .subscribe((data: any) => {\n        if (\n          (data.resetStatus !== undefined || data.resetStatus !== null) &&\n          data.resetStatus == 'success'\n        ) {\n          this.resetPasswordValue = data.newPassword;\n        }\n        this.passwordResetComplete = true;\n      });\n  }\n\n  showResetPasswordModal() {\n    this.resetSubmitted = false;\n    $('#resetPasswordModal').modal('show');\n  }\n\n  hideResetPasswordModal() {\n    this.resetSubmitted = false;\n    $('#resetPasswordModal').modal('hide');\n  }\n\n  getUsername() {\n    return this.loginForm.get('userName').value;\n  }\n\n  getPassword() {\n    return this.loginForm.get('password').value;\n  }\n\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  onSubmit() {\n    console.log('Submitted');\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authService\n      .login(this.getUsername(), this.getPassword())\n      .subscribe((data: any) => {\n        if (data.loginStatus == 'success') {\n          this.currentUser = data.user;\n          console.log(this.currentUser);\n          this.authService.setCurrentUser(this.currentUser);\n          this.submitted = false;\n          this.router.navigateByUrl('home');\n        } else {\n          this.invalid = true;\n          this.loading = false;\n        }\n      });\n  }\n}\n","<div class=\"container-fluid px-1 px-md-5 px-lg-1 px-xl-5 py-5 mx-auto\">\n  <div class=\"card card0 border-0\">\n    <div class=\"row d-flex\">\n      <div class=\"col-lg-5\">\n        <div class=\"card1 pb-6\">\n          <div class=\"row\">\n            <img src=\"../../assets/logo.png\" class=\"logo\">\n          </div>\n          <div class=\"row px-3 justify-content-center mt-4 mb-5 border-line\">\n            <img src=\"../../assets/tweet-mainPage.jpg\" class=\"image\">\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-6\">\n        <div class=\"card2 card border-0 px-4 py-5\">\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"row mb-4 px-3\">\n              <h1 class=\"mb-0 mr-4 mt-2\">Welcome to Tweet Application</h1>\n            </div>\n            <div class=\"row px-3 mb-4\">\n              <div class=\"line\"></div>\n              <small class=\"or text-center\">Login</small>\n              <div class=\"line\"></div>\n            </div>\n            <div class=\"row px-3\">\n              <input type=\"text\" formControlName=\"userName\" class=\"user-input\" placeholder=\"Username\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.userName.errors }\" />\n              <div *ngIf=\"submitted && f.userName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.userName.errors.required\">Username is required</div>\n              </div>\n            </div>\n            <div class=\"row px-3\">\n              <input type=\"password\" formControlName=\"password\" class=\"pass-input\" placeholder=\"Password\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n              <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n              </div>\n            </div>\n           \n                  <div *ngIf=\"invalid\" class=\"text-danger\">\n                    <p>Invalid Credentials:( Please enter correct Username and Password</p>\n                  </div>\n            <div class=\"row mb-3 px-3\">\n              <button type=\"submit\" class=\"btn btn-blue text-center\">Login</button>\n            </div>\n            <div class=\"row mb-4 px-3\">\n              <small class=\"font-weight-bold\">Don't have an account? <a class=\"text-info\"\n                  routerLink=\"register\">Register</a></small>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"bg-blue py-4\">\n      <div class=\"row px-3\">\n        <small class=\"ml-4 ml-sm-5 mb-2\">Copyright &copy; 2022. All rights reserved.</small>\n      </div>\n    </div>\n  </div>\n</div>","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {  \r\n    \r\n    constructor(public auth: AuthService) {}  \r\n    \r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {  \r\n      \r\n    request = request.clone({  \r\n      setHeaders: {  \r\n        Authorization: `${this.auth.getToken()}`  \r\n      }  \r\n    });   \r\n    return next.handle(request);  \r\n  }  \r\n} ","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(private auth: AuthService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if (err.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                alert('You need to login first');\r\n                this.auth.logout();\r\n                location.reload();\r\n            }\r\n\r\n            const error = err.error.message || err.statusText;\r\n            return throwError(error);\r\n        }))\r\n    }\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}