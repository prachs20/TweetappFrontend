{"version":3,"sources":["webpack:///src/app/services/tweet.service.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/reply-tweet/reply-tweet.component.ts","webpack:///src/app/reply-tweet/reply-tweet.component.html","webpack:///src/app/pipes/date-ago.pipe.ts","webpack:///src/environments/environment.ts","webpack:///src/app/reset/reset-pass/reset-pass.component.ts","webpack:///src/app/reset/reset-pass/reset-pass.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/user-list/user-list.component.html","webpack:///src/app/user-list/user-list.component.ts","webpack:///src/app/register/ConfirmedValidator.ts","webpack:///src/app/app.module.ts","webpack:///src/app/services/jwt.guard.ts","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/app/services/auth.service.ts","webpack:///src/app/tweet-list/tweet-list.component.ts","webpack:///src/app/tweet-list/tweet-list.component.html","webpack:///src/app/edit-tweet/edit-tweet.component.ts","webpack:///src/app/edit-tweet/edit-tweet.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/services/TokenInterceptor.ts","webpack:///src/app/services/ErrorInterceptor.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["TweetService","http","get","ApiUrl","username","tweet","post","tweetId","put","id","RegisterComponent","authService","router","formBuilder","submitted","loading","isEmailUnique","isUsernameUnique","success","registerForm","group","firstName","required","pattern","lastName","password","minLength","confirm_password","email","contactNumber","validator","controls","invalid","user","f","value","register","subscribe","response","undefined","navigateByUrl","err","message","includes","onSubmit","ReplyTweetComponent","DateAgoPipe","args","seconds","Math","floor","Date","intervals","year","month","week","day","hour","minute","second","counter","i","environment","production","ResetPassComponent","passwordResetComplete","currentUser","getCurrentUser","resetPasswordForm","console","log","resetPassword","getPassword","data","resetStatus","confirm","setCurrentUser","navigate","AppComponent","title","UserListComponent","tweetService","isLoggedIn","getAllUsers","userList","ConfirmedValidator","controlName","matchingControlName","formGroup","control","matchingControl","errors","confirmedValidator","setErrors","AppModule","provide","useClass","multi","useValue","hasBackdrop","appearance","JwtGuard","route","state","childRoute","component","currentRoute","currentState","nextState","NavbarComponent","observer","sessionStorage","getItem","observe","res","matches","sidenav","mode","close","open","doLogOut","AuthService","currentUserSubject","JSON","parse","localStorage","asObservable","removeItem","setItem","stringify","pipe","token","next","TweetListComponent","dialog","editSubmitted","replySubmitted","tweetList","currentTweet","tweetName","postDate","likes","replies","tweetTag","addTagClicked","likeTweet","refreshTweets","deleteTweet","$","appendTo","modal","editTweetForm","tweetBody","updateTweet","now","replyTweet","replyTweetForm","getTime","getTimezoneOffset","toISOString","splice","currentRouteUsername","getAllTweets","push","getAllTweetsByUsername","postTweet","index","tweetForm","maxLength","snapshot","paramMap","editTweetSubmit","replyTweetSubmit","removeTag","EditTweetComponent","editDialogRef","onCloseClick","save","routes","path","redirectTo","pathMatch","canActivate","children","AppRoutingModule","forRoot","LoginComponent","resetSubmitted","loginForm","userName","forgotPassword","resetPasswordValue","newPassword","login","getUsername","loginStatus","TokenInterceptor","auth","request","clone","setHeaders","Authorization","getToken","handle","ErrorInterceptor","status","alert","logout","location","reload","error","statusText","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../interfaces/user';\nimport { Tweet } from '../interfaces/tweet';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TweetService {\n  constructor(private http: HttpClient) {}\n\n  getAllUsers() {\n    return this.http.get(environment.ApiUrl + '/users/all');\n  }\n\n  getUsersByUsername(username: string) {\n    return this.http.get(environment.ApiUrl + `/user/search/${username}`);\n  }\n\n  getAllTweetsByUsername(username: string) {\n    return this.http.get(environment.ApiUrl + `/${username}`);\n  }\n\n  getAllTweets() {\n    return this.http.get(environment.ApiUrl + '/all');\n  }\n\n  postTweet(tweet: Tweet, username: string) {\n    return this.http.post(environment.ApiUrl + `/${username}/add`, tweet);\n  }\n\n  likeTweet(tweetId: string, username: string) {\n    return this.http.put(\n      environment.ApiUrl + `/${username}/like/${tweetId}`,\n      null\n    );\n  }\n\n  deleteTweet(tweetId: string, username: string) {\n    return this.http.delete(\n      environment.ApiUrl + `/${username}/delete/${tweetId}`\n    );\n  }\n\n  updateTweet(tweet: Tweet, username: string) {\n    return this.http.put(\n      environment.ApiUrl + `/${username}/update/${tweet.id}`,\n      tweet\n    );\n  }\n\n  replyTweet(tweetId: string, tweet: Tweet, username: string) {\n    return this.http.post(\n      environment.ApiUrl + `/${username}/reply/${tweetId}`,\n      tweet\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../interfaces/user';\nimport { Router } from '@angular/router';\nimport { ConfirmedValidator } from './ConfirmedValidator';\n\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  submitted: boolean = false;\n  loading: boolean = false;\n  isEmailUnique: boolean = true;\n  isUsernameUnique: boolean = true;\n  success: boolean = false;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {\n    this.registerForm = this.formBuilder.group({\n      firstName: ['', [Validators.required,Validators.pattern('[A-ZA-z]{1,}')]],\n      lastName: ['', Validators.required],\n      username: ['', Validators.required],\n      password: ['', [Validators.required,Validators.minLength(6)]],\n      confirm_password: ['', [Validators.required]],\n      email: ['', [Validators.required,Validators.email]],\n      contactNumber: [\n        '',\n        [Validators.required, Validators.pattern('[6-9]{1}[0-9]{9}')],\n      ],\n    },{\n    validator: ConfirmedValidator('password', 'confirm_password')\n    });\n  }\n\n  get f() {\n    return this.registerForm.controls;\n  }\n  ngOnInit(): void {}\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.registerForm.invalid) {\n      return;\n    }\n    let user: User = {\n      id: null,\n      username: this.f.username.value,\n      password: this.f.password.value,\n      email: this.f.email.value,\n      firstName: this.f.firstName.value,\n      lastName: this.f.lastName.value,\n      contactNumber: this.f.contactNumber.value,\n    };\n    this.loading = true;\n    this.authService.register(user).subscribe(\n      (response: any) => {\n        this.loading = false;\n        if (response.username !== undefined) {\n            this.success = true;\n            this.router.navigateByUrl('login');\n        }\n      },\n      (err) => {\n        this.loading = false;\n        if (\n          err.message.includes('duplicate key') &&\n          err.message.includes('username')\n        ) {\n          this.isUsernameUnique = false;\n        }\n        if (\n          err.message.includes('duplicate key') &&\n          err.message.includes('email')\n        ) {\n          this.isEmailUnique = false;\n        }\n      }\n    );\n  }\n}\n","\n<div class=\"container-fluid px-1 px-md-5 px-lg-1 px-xl-5 py-5 mx-auto\">\n  <div class=\"card card0 border-0\">\n    <div class=\"row d-flex\">\n      <div class=\"col-lg-5\">\n        <div class=\"card1 pb-6\">\n          <div class=\"row\">\n            <img src=\"../../assets/logo.png\" class=\"logo\">\n          </div>\n          <div class=\"row px-3 justify-content-center mt-4 mb-5 border-line\">\n            <img src=\"../../assets/registerPage.png\" class=\"image\">\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-6\">\n        <div class=\"card2 card border-0 px-4 py-5\">\n          <div class=\"row mb-4 px-3\">\n            <h2 class=\"mb-0 mr-4 mt-2\">Please Register Here</h2>\n          </div>\n          <div class=\"row px-3 mb-4\">\n            <div class=\"line\"></div>\n            <small class=\"or text-center\">Register</small>\n            <div class=\"line\"></div>\n          </div>\n          <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n              <!-- <label for=\"firstName\">First Name</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"firstName\"\n                class=\"form-control\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\"\n                placeholder=\"First Name\"\n              />\n              <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.firstName.errors.required\">\n                  First Name is required\n                </div>\n                <div *ngIf=\"f.firstName.errors.pattern\">\n                  Name only accpect Alphabetic charactor.\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"lastName\">Last Name</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"lastName\"\n                class=\"form-control\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\"\n                placeholder=\"Last Name\"\n              />\n              <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"username\">Username</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"username\"\n                class=\"form-control\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\"\n                placeholder=\"Username\"\n              />\n              <div\n                *ngIf=\"submitted && (f.username.errors || !isUsernameUnique)\"\n                class=\"invalid-feedback\">\n                <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                <div *ngIf=\"!isUsernameUnique\">Username already exists</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"password\">Password</label> -->\n              <input\n                type=\"password\"\n                formControlName=\"password\"\n                class=\"form-control\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\n                placeholder=\"Password\"\n              />\n              <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                <div *ngIf=\"f.password.errors?.minlength\">Minium Password length is 6</div>\n              </div>\n            </div>\n            <!-- Confirm Password -->\n            <div class=\"form-group\">\n              <!-- <label for=\"confirm_password\">Confirm Password</label> -->\n              <input \n                  formControlName=\"confirm_password\"\n                  id=\"confirm_password\" \n                  type=\"password\" \n                  placeholder=\"Confirm Password\"\n                  class=\"form-control\">\n              <div *ngIf=\"f.confirm_password.touched && f.confirm_password.invalid\" class=\"alert alert-danger\">\n                  <div *ngIf=\"f.confirm_password.errors.required\">Confirm Password is required.</div>\n                  <div *ngIf=\"f.confirm_password.errors.confirmedValidator\">Password and Confirm Password must be match.</div>\n              </div>\n          </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"email\">Email</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"email\"\n                class=\"form-control\"\n                placeholder=\"Email\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"\n              />\n              <div\n                *ngIf=\"submitted && (f.email.errors || !isEmailUnique)\"\n                class=\"invalid-feedback\"\n              >\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                <div *ngIf=\"!isEmailUnique\">Email already exists</div>\n                <div *ngIf=\"f.email.errors.email\">Please enter valide Email</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <!-- <label for=\"contact-number\">Contact Number</label> -->\n              <input\n                type=\"text\"\n                formControlName=\"contactNumber\"\n                class=\"form-control\"\n                placeholder=\"Contact Number\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.contactNumber.errors }\"\n              />\n              <div\n                *ngIf=\"submitted && f.contactNumber.errors\"\n                class=\"invalid-feedback\"\n              >\n                <div *ngIf=\"f.contactNumber.errors.required\">\n                  Contact Number is required\n                </div>\n                \n                <div *ngIf=\"f.contactNumber.errors.pattern\">\n                  Contact Number can only be a 10 digit number\n                              </div>\n              </div>\n            </div>\n            <div *ngIf=\"success\" class=\"text-success mb-3\">\n              Registered successfully!\n            </div>\n            <div class=\"form-group\">\n              <button [disabled]=\"loading\" class=\"btn btn-blue\">\n                <span\n                  *ngIf=\"loading\"\n                  class=\"spinner-border spinner-border-sm mr-1\"\n                ></span>\n                Register \n              </button>\n              <a routerLink=\"../login\" class=\"text-info\">Cancel</a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"bg-blue py-4\">\n      <div class=\"row px-3\">\n        <small class=\"ml-4 ml-sm-5 mb-2\">Copyright &copy; 2022. All rights reserved.</small>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-reply-tweet',\n  templateUrl: './reply-tweet.component.html',\n  styleUrls: ['./reply-tweet.component.css']\n})\nexport class ReplyTweetComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>reply-tweet works!</p>\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'dateAgo',\n  pure: true,\n})\nexport class DateAgoPipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    if (value) {\n      const seconds = Math.floor((+new Date() - +new Date(value)) / 1000);\n      if (seconds < 29)\n        // less than 30 seconds ago will show as 'Just now'\n        return 'Just now';\n      const intervals = {\n        year: 31536000,\n        month: 2592000,\n        week: 604800,\n        day: 86400,\n        hour: 3600,\n        minute: 60,\n        second: 1,\n      };\n      let counter;\n      for (const i in intervals) {\n        counter = Math.floor(seconds / intervals[i]);\n        if (counter > 0)\n          if (counter === 1) {\n            return counter + ' ' + i + ' ago'; // singular (1 day ago)\n          } else {\n            return counter + ' ' + i + 's ago'; // plural (2 days ago)\n          }\n      }\n    }\n    return value;\n  }\n}\n","\nexport const environment = {\n  production: false,\n  ApiUrl: \"http://Tweetapp-env.eba-fhj22csk.ap-south-1.elasticbeanstalk.com/api/v1.0/tweets\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { User } from 'src/app/interfaces/user';\nimport { ConfirmedValidator } from 'src/app/register/ConfirmedValidator';\n@Component({\n  selector: 'app-reset-pass',\n  templateUrl: './reset-pass.component.html',\n  styleUrls: ['./reset-pass.component.css']\n})\nexport class ResetPassComponent implements OnInit {\n  resetSubmitted: boolean;\n  loading: boolean;\n\n  constructor( private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router) { }\n  resetPasswordForm: FormGroup;\n  submitted: boolean = false;\n  resetPasswordValue: string;\n  currentUser: User;\n  invalid = false;\n  passwordResetComplete: boolean = false;\n  ngOnInit(): void {\n    this.currentUser = this.authService.getCurrentUser();\n    this.resetPasswordForm = this.formBuilder.group({\n      password: ['', [Validators.required,Validators.minLength(6)]],\n      confirm_password: ['', [Validators.required]]\n    },\n    { \n      validator: ConfirmedValidator('password', 'confirm_password')\n    }\n    );\n  }\n  get f() {\n    return this.resetPasswordForm.controls;\n  }\n  getPassword() {\n    return this.resetPasswordForm.get('password').value;\n  }\n  onSubmit() {\n    console.log('Submitted');\n    this.submitted = true;\n    if (this.resetPasswordForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authService\n      .resetPassword( this.currentUser.username,this.getPassword())\n        .subscribe((data: any) => {\n          this.loading=false;\n          if (\n            (data.resetStatus !== undefined || data.resetStatus !== null) &&\n            data.resetStatus == 'success'\n          ) {\n            \n           if (confirm(\"Password reset done please login again\")){\n              this.authService.setCurrentUser(null);\n            }\n            this.authService.setCurrentUser(null);\n            this.router.navigate([''])\n          }\n          this.passwordResetComplete = true;\n        });\n  }\n}\n","<div class=\"col-md-4 offset-md-4 mt-5\">\n    <div class=\"card\">\n      <h4 class=\"card-header\" style=\" background: #79a9e0;\">Password Reset</h4>\n      <div class=\"card-body\">\n        <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input\n              type=\"password\"\n              formControlName=\"password\"\n              class=\"form-control\"\n              [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\n            />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\n              <div *ngIf=\"f.password.errors?.minlength\">Minium Password length is 6</div>\n            </div>\n          </div>\n          <!-- Confirm Password -->\n          <div class=\"form-group\">\n            <label for=\"confirm_password\">Confirm Password</label>\n            <input \n                formControlName=\"confirm_password\"\n                id=\"confirm_password\" \n                type=\"password\" \n                class=\"form-control\">\n            <div *ngIf=\"f.confirm_password.touched && f.confirm_password.invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f.confirm_password.errors.required\">Confirm Password is required.</div>\n                <div *ngIf=\"f.confirm_password.errors.confirmedValidator\">Password and Confirm Password must be match.</div>\n            </div>\n        </div>\n          <div *ngIf=\"invalid\" class=\"mb-3 text-danger\">User does not exist!</div>\n          <div class=\"form-group\">\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\n              <span\n                *ngIf=\"loading\"\n                class=\"spinner-border spinner-border-sm mr-1\"\n              ></span>\n              Reset\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tweet App';\n}\n","<router-outlet></router-outlet>\n   ","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n    </div>\n    <div class=\"col-md-9\">\n      <div class=\"row row-col-4 g-4\">\n        <div *ngFor=\"let user of userList\">\n          <div class=\"card ml-5 col mt-3\" style=\"width: 18rem\">\n            <img  src=\"https://img.icons8.com/officel/80/000000/test-account.png\" [ngClass]=\"user.username == currentUser.username ?'card-img-top':'card-img-top grayscale'\" alt=\"...\" />\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">\n                <a\n                  class=\"link-primary\"\n                  [routerLink]=\"['/tweets', user.username]\"\n                  >{{ user.username }}</a\n                >\n              </h5>\n              <div class=\"card-text\">\n                <ul>\n                  <li>{{ user.email }}</li>\n                  <!-- <li>{{ user.contactNumber }}</li> -->\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n  Form,\n} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../interfaces/user';\nimport { Tweet } from '../interfaces/tweet';\nimport { Router } from '@angular/router';\nimport { TweetService } from '../services/tweet.service';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.css'],\n})\nexport class UserListComponent implements OnInit {\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private tweetService: TweetService\n  ) {}\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('login');\n    }\n    this.currentUser = this.authService.getCurrentUser();\n    this.tweetService\n      .getAllUsers()\n      .subscribe((data: any) => (this.userList = data));\n  }\n\n  currentUser: User;\n  userList: User[];\n}\n","import { FormGroup } from '@angular/forms';\r\n    \r\nexport function ConfirmedValidator(controlName: string, matchingControlName: string){\r\n    return (formGroup: FormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n        if (matchingControl.errors && !matchingControl.errors.confirmedValidator) {\r\n            return;\r\n        }\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ confirmedValidator: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { TweetListComponent } from './tweet-list/tweet-list.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { DateAgoPipe } from './pipes/date-ago.pipe';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { ResetPassComponent } from './reset/reset-pass/reset-pass.component';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDividerModule } from '@angular/material/divider';\nimport {MatFormFieldModule, MAT_FORM_FIELD_DEFAULT_OPTIONS} from '@angular/material/form-field';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n\nimport { TokenInterceptor } from './services/TokenInterceptor';\nimport { ErrorInterceptor } from './services/ErrorInterceptor';\nimport { EditTweetComponent } from './edit-tweet/edit-tweet.component';\nimport { ReplyTweetComponent } from './reply-tweet/reply-tweet.component';\nimport { MatDialogModule, MAT_DIALOG_DEFAULT_OPTIONS } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    TweetListComponent,\n    DateAgoPipe,\n    UserListComponent,\n    ResetPassComponent,\n    EditTweetComponent,\n    ReplyTweetComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDividerModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    \n    \n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n    {provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}},\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'fill'}}\n\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, CanActivateChild, CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtGuard implements CanActivate, CanActivateChild, CanDeactivate<unknown> {\n\n  // using this we can navigate on error\n  constructor(private router : Router,private authService:AuthService) { }\n\n  canActivate(route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree \n  {  return true;\n      // if(this.authService.isLoggedIn)\n      //   return true;\n      // else {\n      //   alert('You need to login first');\n      //   this.router.navigate(['/login'])\n      //   return false;\n      // }\n  \n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n  canDeactivate(\n    component: unknown,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState?: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n  \n}\n","import { EventEmitter, OnInit, Output } from '@angular/core';\nimport { User } from '../interfaces/user';\nimport { AuthService } from '../services/auth.service';\nimport { Component, ViewChild } from '@angular/core';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { delay, filter } from 'rxjs/operators';\nimport { NavigationEnd, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css'],\n})\nexport class NavbarComponent implements OnInit {\n\n  @ViewChild(MatSidenav)\n  sidenav!: MatSidenav;\n  \n  currentUser: User|undefined;\n  \n  constructor(private authService:AuthService,private router:Router,private observer: BreakpointObserver) {}\n\n  username=sessionStorage.getItem(\"username\");\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('login');\n    }\n    this.currentUser = this.authService.getCurrentUser();\n  }\n\n  ngAfterViewInit() {\n    this.observer.observe(['(max-width: 800px)']).subscribe((res) => {\n      if (res.matches) {\n        this.sidenav.mode = 'over';\n        this.sidenav.close();\n      } else {\n        this.sidenav.mode = 'side';\n        this.sidenav.open();\n      }\n    });\n  }\n\n  doLogOut()\n  {\n    this.authService.setCurrentUser(null);\n    this.router.navigateByUrl(\"/\");\n  }\n}\n","<mat-toolbar class=\"mat-elevation-z8\">\n  <button mat-icon-button (click)=\"sidenav.toggle()\">\n    <mat-icon *ngIf=\"!sidenav.opened\">\n        menu\n    </mat-icon>\n    <mat-icon *ngIf=\"sidenav.opened\">\n        close\n    </mat-icon>\n</button>\n \n  <div class=\"row\">\n    <div class=\"column\">\n      <div class=\"icon-text\">\n        <button mat-button class=\"menu-button\" routerLink=\"/home\">\n         \n          <img class=\"logo\" src=\"../../assets/logo.png\"/>\n          <span class=\"name\">Tweet App</span>\n        </button>\n      </div>\n    </div>\n    <div class=\"column\" style=\"display: flex; justify-content: flex-end\">\n\n      <div class=\"icon-text\" style=\"display: flex; justify-content: flex-end\">\n        <button mat-button class=\"menu-button\" >\n          <mat-icon>chat</mat-icon>\n          <span class=\"name\"><a routerLink=\"tweets/all\" style=\" color: #000000;\">Tweets</a></span>\n        </button>\n      </div>\n    </div>\n    <div class=\"column\" style=\"display: flex; justify-content: flex-end\">\n      <div class=\"icon-text\" style=\"display: flex; justify-content: flex-end\">\n        <button mat-button class=\"menu-button\">\n          <mat-icon>supervisor_account</mat-icon>\n          <span class=\"name\"><a routerLink=\"user-list\" style=\" color: #000000;\">Users</a></span>\n        </button>\n      </div>\n    </div>\n  </div>\n</mat-toolbar>\n\n<mat-sidenav-container>\n  <mat-sidenav  #sidenav=\"matSidenav\"  class=\"mat-elevation-z8\" >\n    <img class=\"avatar mat-elevation-z8\" src=\"https://img.icons8.com/plumpy/96/000000/test-account.png\" />\n    <h4 class=\"name\">{{currentUser.username}}</h4>\n    <mat-divider></mat-divider>\n    <button mat-button class=\"menu-button\">\n      <mat-icon>person</mat-icon>\n      <span class=\"name\">{{currentUser.firstName}},{{currentUser.lastName}}</span>\n    </button>\n    <button mat-button class=\"menu-button\">\n      <mat-icon>phone</mat-icon>\n      <span class=\"name\">+91 {{currentUser.contactNumber}}</span>\n    </button>\n    <button mat-button class=\"menu-button\">\n      <mat-icon>email</mat-icon>\n      <span class=\"name\">{{currentUser.email}}</span>\n    </button>\n    <mat-divider></mat-divider>\n\n    <button mat-button class=\"menu-button\">\n      <mat-icon>https</mat-icon>\n      <span>\n        <a routerLink=\"passwordReset/{{currentUser.username}}\">Reset Password</a></span>\n    </button>\n    <button mat-button class=\"menu-button\">\n      <mat-icon>logout</mat-icon>\n      <span>\n        <a routerLink=\"logout\" (click)=\"doLogOut()\" aria-hidden=\"true\">Logout</a></span>\n    </button>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <div class=\"content mat-elevation-z8\">\n      <router-outlet></router-outlet>\n    </div>\n  </mat-sidenav-content>\n  <mat-sidenav-container>","import { Injectable } from '@angular/core';\nimport { User } from '../interfaces/user';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport { userResponse } from '../interfaces/userResponse';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  \n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\npublic get currentUserValue(): User {\n    return this.currentUserSubject.value;\n}\n  private currentUserSubject: BehaviorSubject<User>;\n  public currentUser: Observable<User>;\n\n  private token:string;\n\n  forgotPassword(username: string) {\n    return this.http.get(environment.ApiUrl + `/${username}/forgot`);\n  }\n  resetPassword(username: string, password: string){\n    return this.http.post(environment.ApiUrl + '/reset', {\n      username,\n      password,\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('currentUser'));\n  }\n\n  setCurrentUser(user: User) {\n    if (user == null) {\n      localStorage.removeItem('currentUser');\n      return;\n    }\n    localStorage.setItem('currentUser', JSON.stringify(user));\n  }\n\n  isLoggedIn() {\n    if (localStorage.getItem('currentUser') != null) {\n      return true;\n    }\n    return false;\n  }\n\n\n\n  // login(username: string, password: string) {\n\n  //   return this.http.post(environment.ApiUrl + '/login', { username,password});\n\n  // }\n\n  login(username: string, password: string) {\n    return this.http.post<any>(environment.ApiUrl+'/login', { username, password })\n        .pipe(map(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('currentUser', JSON.stringify(user));\n            console.log(user);\n            console.log(\"---\"+user.token);\n            this.token=user.token;\n            this.currentUserSubject.next(user);\n            return user;\n        }));\n  }\n\n  getToken(){\n    return this.token;\n  }\nlogout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n}\n\n  register(user: User) {\n    return this.http.post(environment.ApiUrl + '/register', user);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n  Form,\n} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../interfaces/user';\nimport { Tweet } from '../interfaces/tweet';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { TweetService } from '../services/tweet.service';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { EditTweetComponent } from '../edit-tweet/edit-tweet.component';\ndeclare var $: any;\n\n@Component({\n  selector: 'app-tweet-list',\n  templateUrl: './tweet-list.component.html',\n  styleUrls: ['./tweet-list.component.css'],\n})\nexport class TweetListComponent implements OnInit {\n  tweetForm: FormGroup;\n  loading: boolean = false;\n  submitted: boolean = false;\n  editSubmitted: boolean = false;\n  replySubmitted: boolean = false;\n  currentUser: User;\n  tweetList: Tweet[] = [];\n  replyTweetForm: FormGroup;\n  editTweetForm: FormGroup;\n  currentTweet: Tweet = {\n    id: null,\n    tweetName: null,\n    postDate: null,\n    likes: 0,\n    user: null,\n    replies: null,\n    tweetTag: null,\n  };\n  addTagClicked: boolean = false;\n  currentRouteUsername: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private tweetService: TweetService,\n    private route: ActivatedRoute,\n    private dialog:MatDialog,\n  ) {}\n\n  addTag() {\n    this.addTagClicked = true;\n  }\n\n  removeTag() {\n    this.addTagClicked = false;\n  }\n\n  likeTweet(tweetId: string) {\n    this.tweetService\n      .likeTweet(tweetId, this.currentUser.username)\n      .subscribe((data: any) => {\n        this.refreshTweets();\n      });\n  }\n\n  deleteTweet(tweetId: string) {\n    this.tweetService\n      .deleteTweet(tweetId, this.currentUser.username)\n      .subscribe((data: any) => this.refreshTweets());\n  }\n\n  openEditTweetPopup(tweet: Tweet) {\n    this.currentTweet = tweet;\n    console.log(\"current tweet:\",this.currentTweet);\n    console.log(\"tweet: \",tweet);\n    $('#editModal').appendTo(\"body\").modal('show');\n\n    //for Mat Dialog\n    // const editDialogconfig=new MatDialogConfig();\n    // editDialogconfig.disableClose=true;\n    // editDialogconfig.autoFocus=true;\n    // editDialogconfig.data=tweet;\n\n    // const editDialogRef=this.dialog.open(EditTweetComponent,editDialogconfig)\n\n    // editDialogRef.afterClosed().subscribe(\n    //   editDate=>console.log(\"from dialog \",editDate)\n      \n    // )\n\n  }\n  openReplyTweetPopup(tweet: Tweet) {\n    this.currentTweet = tweet;\n    $('#replyModal').appendTo(\"body\") .modal('show');\n  }\n\n  editTweetSubmit() {\n    this.editSubmitted = true;\n    this.currentTweet.tweetName = this.editTweetForm.controls.tweetBody.value;\n    this.tweetService\n      .updateTweet(this.currentTweet, this.currentUser.username)\n      .subscribe((data: any) => {\n        this.refreshTweets();\n        this.currentTweet = {\n          id: null,\n          tweetName: null,\n          postDate: null,\n          likes: 0,\n          user: null,\n          replies: null,\n          tweetTag: null,\n        };\n        $('#editModal').modal('hide');\n        this.addTagClicked = false;\n      });\n  }\n\n  replyTweetSubmit() {\n    this.replySubmitted = true;\n    let now = new Date();\n    let replyTweet: Tweet = {\n      id: null,\n      tweetName: this.replyTweetForm.controls.tweetBody.value,\n      postDate: new Date(\n        now.getTime() - now.getTimezoneOffset() * 60000\n      ).toISOString(),\n      likes: null,\n      user: this.currentUser,\n      replies: null,\n      tweetTag: this.replyTweetForm.controls.tweetTag.value,\n    };\n    this.tweetService\n      .replyTweet(this.currentTweet.id, replyTweet, this.currentUser.username)\n      .subscribe((data: any) => {\n        this.refreshTweets();\n        this.currentTweet = {\n          id: null,\n          tweetName: null,\n          postDate: null,\n          likes: 0,\n          user: null,\n          replies: null,\n          tweetTag: null,\n        };\n        $('#replyModal').modal('hide');\n        this.addTagClicked = false;\n      });\n  }\n\n  refreshTweets() {\n    this.tweetList.splice(0);\n    if (this.currentRouteUsername === null) {\n      this.tweetService.getAllTweets().subscribe((data: any) => {\n        this.tweetList.push(...data);\n      });\n    } else {\n      this.tweetService\n        .getAllTweetsByUsername(this.currentRouteUsername)\n        .subscribe((data: any) => {\n          this.tweetList.push(...data);\n        });\n    }\n    console.log(this.tweetList);\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    this.loading = true;\n    let tweet: Tweet = {\n      id: null,\n      tweetName: this.f.tweetBody.value,\n      postDate: null,\n      likes: 0,\n      user: null,\n      replies: [],\n      tweetTag: this.f.tweetTag.value,\n    };\n    this.tweetService.postTweet(tweet, this.currentUser.username).subscribe(\n      (data: any) => {\n        if (data.id !== undefined) {\n          this.refreshTweets();\n          console.log(this.tweetList);\n          this.addTagClicked = false;\n        }\n        this.loading = false;\n      },\n      (err) => {\n        this.loading = false;\n      }\n    );\n\n    console.log('x');\n  }\n  trackTweet(index: number, tweet: Tweet) {\n    return tweet.id;\n  }\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('login');\n    }\n    this.currentUser = this.authService.getCurrentUser();\n    this.tweetForm = this.formBuilder.group({\n      tweetBody: ['', [Validators.required, Validators.maxLength(144)]],\n      tweetTag: ['', Validators.maxLength(50)],\n    });\n    this.replyTweetForm = this.formBuilder.group({\n      tweetBody: ['', [Validators.required, Validators.maxLength(144)]],\n      tweetTag: ['', Validators.maxLength(50)],\n    });\n    this.editTweetForm = this.formBuilder.group({\n      tweetBody: ['', [Validators.required, Validators.maxLength(144)]],\n    });\n    this.currentRouteUsername = this.route.snapshot.paramMap.get('username');\n    if (this.currentRouteUsername === null) {\n      this.tweetService.getAllTweets().subscribe((data: any) => {\n        this.tweetList = data;\n      });\n    } else {\n      this.tweetService\n        .getAllTweetsByUsername(this.currentRouteUsername)\n        .subscribe((data: any) => {\n          this.tweetList = data;\n        });\n    }\n  }\n\n  get f() {\n    return this.tweetForm.controls;\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <!-- Nav Bar Component -->\n    <div class=\"col-md-1\"></div>\n    <div class=\"col-md-7\">\n      <div class=\"row\">\n        <div class=\"card mb-2 mt-3 w-100\">\n          <h4 class=\"card-header\" style=\" background: #79a9e0;\">Post something here..</h4>\n          <div class=\"card-body\">\n            <form [formGroup]=\"tweetForm\" (ngSubmit)=\"onSubmit()\">\n              <div class=\"form-group\">\n                <textarea formControlName=\"tweetBody\" class=\"form-control\"\n                  [ngClass]=\"{ 'is-invalid': submitted && f.tweetBody.errors }\"></textarea>\n                <div *ngIf=\"submitted && f.tweetBody.errors\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f.tweetBody.errors.required\">\n                    Tweet text is required\n                  </div>\n                  <div *ngIf=\"f.tweetBody.errors.maxlength\">\n                    Tweet content cannot exceed 144 characters!\n                  </div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <button [disabled]=\"loading\" type=\"submit\" class=\"btn btn-outline-primary\">\n                  <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                  Post\n                </button>\n                <span class=\"float-right\" *ngIf=\"!addTagClicked\">\n                  <button class=\"btn btn-secondary\" (click)=\"addTag()\">\n                    Tag\n                  </button>\n                </span>\n                <span class=\"float-right\" *ngIf=\"addTagClicked\">\n                  <button class=\"btn btn-outline-danger btn-sm float-right ml-3\" (click)=\"removeTag()\">\n                    X\n                  </button>\n                  <input type=\"text\" formControlName=\"tweetTag\" [ngClass]=\"{\n                      'is-invalid': submitted && f.tweetTag.errors\n                    }\" />\n                </span>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n      <!-- Post tweet Chat -->\n     \n        <div class=\"row row-cols-1\" *ngFor=\"let tweet of tweetList; trackBy: trackTweet\">\n          \n            <div class=\"entete card w-100 h-100\">\n              <div class=\"row no-gutters\">\n                <div class=\"col-md-2\">\n                  <img src=\"../../assets/icon.png\"\n                    [ngClass]=\"tweet.user.username == currentUser.username ?'card-img':'card-img grayscale'\"\n                    alt=\"...\" />\n                </div>\n                <div class=\"col-md-10\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">\n                      {{ tweet.user.username }}\n                      <span class=\"float-right\" *ngIf=\"tweet.user.username == currentUser.username\">\n                        <button class=\"btn btn-outline-dark ml-2\" (click)=\"openEditTweetPopup(tweet)\">\n                          <i class=\"fa fa-edit\"></i></button><button class=\"btn btn-outline-danger ml-2\"\n                          (click)=\"deleteTweet(tweet.id)\">\n                          <i class=\"fa fa-trash\"></i></button></span>\n                    </h5>\n\n                    <p class=\"card-text\">\n                      {{ tweet.tweetName }}\n\n                      <small class=\"text-muted\" *ngIf=\"tweet.tweetTag != null\">#{{ tweet.tweetTag }}</small>\n                    </p>\n                  </div>\n                  <div class=\"card-footer mt-auto\">\n                    <p class=\"card-text\">\n                      <small class=\"text-muted\">{{\n                        tweet.postDate | dateAgo\n                        }}</small>\n\n                      <span class=\"ml-3 float-right\">\n                        <button class=\"btn btn-outline-primary\" (click)=\"likeTweet(tweet.id)\">\n                          <i class=\"fa fa-thumbs-up\"> {{ tweet.likes }} </i>\n                        </button>\n                        <button class=\"btn btn-outline-info ml-2\" (click)=\"openReplyTweetPopup(tweet)\">\n                          <i class=\"fa fa-reply\"></i>\n                        </button>\n                      </span>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n       \n          <!-- reply chat -->\n          \n            <div class=\"row row-cols-1\" *ngIf=\"tweet.replies.length > 0\">\n              <div class=\"row w-100\" *ngFor=\"let replyTweet of tweet.replies\">\n                <div class=\"card mb-2 mt-2 w-75 ml-auto\">\n                  <div class=\"row no-gutters\">\n                    <div class=\"col-md-2\">\n                      <img src=\"../../assets/icon.png\" class=\"card-img grayscale\" alt=\"...\" />\n                    </div>\n                    <div class=\"col-md-10\">\n                      <div class=\"card-body\">\n                        <h5 class=\"card-title\">@{{ replyTweet.user.username }}</h5>\n\n                        <p class=\"card-text\">\n                          {{ replyTweet.tweetName }}\n                          <small class=\"text-muted\" *ngIf=\"replyTweet.tweetTag != null\">#{{ replyTweet.tweetTag\n                            }}</small>\n                        </p>\n                        <p class=\"card-text\">\n                          <small class=\"text-muted\">{{\n                            replyTweet.postDate | dateAgo\n                            }}</small>\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          \n        </div>\n     \n    </div>\n    <div class=\"col-md-1\"></div>\n  </div>\n</div>\n\n<!-- edit tweet -->\n<div class=\"modal fade\" id=\"editModal\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\" style=\" background: #79a9e0;\">\n        <h5 class=\"modal-title\">Edit Tweet</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"></button>\n      </div>\n      <form [formGroup]=\"editTweetForm\" (ngSubmit)=\"editTweetSubmit()\">\n        <div class=\"modal-body\">\n          <textarea placeholder=\"{{ currentTweet.tweetName }}\" class=\"w-100\" formControlName=\"tweetBody\" [ngClass]=\"{\n              'is-invalid':\n                editSubmitted && editTweetForm.controls.tweetBody.errors\n            }\"></textarea>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">\n            Close\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\">Save changes</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n\n<!-- reply tweet -->\n<div class=\"modal fade\" id=\"replyModal\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\" style=\" background: #79a9e0;\">\n        <h5 class=\"modal-title\">Reply Tweet</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"></button>\n      </div>\n      <form [formGroup]=\"replyTweetForm\" (ngSubmit)=\"replyTweetSubmit()\">\n        <div class=\"modal-body\">\n          <p>{{ currentTweet.tweetName }}</p>\n          <textarea placeholder=\"Your reply here...\" class=\"w-100\" formControlName=\"tweetBody\" [ngClass]=\"{\n              'is-invalid':\n                replySubmitted && replyTweetForm.controls.tweetBody.errors\n            }\"></textarea>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"removeTag()\">\n            Close\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\">Reply</button>\n          <span class=\"float-right\" *ngIf=\"!addTagClicked\">\n            <button class=\"btn btn-primary\" (click)=\"addTag()\">Tag</button>\n          </span>\n          <span class=\"float-right\" *ngIf=\"addTagClicked\">\n            <button class=\"btn btn-outline-danger btn-sm float-right ml-3\" (click)=\"removeTag()\">\n              X\n            </button>\n            <input type=\"text\" formControlName=\"tweetTag\" [ngClass]=\"{\n                'is-invalid':\n                  replySubmitted && replyTweetForm.controls.tweetTag.errors\n              }\" />\n          </span>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tweet } from '../interfaces/tweet';\nimport { User } from '../interfaces/user';\nimport { AuthService } from '../services/auth.service';\nimport { TweetService } from '../services/tweet.service';\n\n@Component({\n  selector: 'app-edit-tweet',\n  templateUrl: './edit-tweet.component.html',\n  styleUrls: ['./edit-tweet.component.css']\n})\nexport class EditTweetComponent implements OnInit {\n\n\n  // editSubmitted: boolean = false;\n   currentUser: User;\n  tweetList: Tweet[] = [];\n  currentTweet: Tweet = {\n    id: null,\n    tweetName: null,\n    postDate: null,\n    likes: 0,\n    user: null,\n    replies: null,\n    tweetTag: null,\n  };\n  editTweetForm: FormGroup;\n  // addTagClicked: boolean = false;\n  // currentRouteUsername: string;\n\n  constructor(public editDialogRef:MatDialogRef<EditTweetComponent>,\n    @Inject(MAT_DIALOG_DATA) public data:Tweet,\n    private formBuilder: FormBuilder,\n    private tweetService: TweetService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    ) {}\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('login');\n    }\n    this.currentUser = this.authService.getCurrentUser();\n    this.editTweetForm = this.formBuilder.group({\n      tweetBody: ['', [Validators.required, Validators.maxLength(144)]],\n    });\n  }\n\n  onCloseClick(): void {\n    this.editDialogRef.close();\n  }\n\n  save() {\n    this.editDialogRef.close(this.editTweetForm.value);\n  }\n  get f() {\n    return this.editTweetForm.controls;\n  }\n}\n","<h2 mat-dialog-title>Edit Tweet</h2>\n\n<mat-dialog-content [formGroup]=\"editTweetForm\">\n  \n    <mat-form-field>\n        <textarea matInput\n                placeholder=\"{{data.tweetName}}\"\n               formControlName=\"tweetBody\"></textarea>\n\n    </mat-form-field>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button class=\"mat-raised-button\"(click)=\"onCloseClick()\">Close</button>\n    <button class=\"mat-raised-button mat-primary\"(click)=\"save()\">Save</button>\n</mat-dialog-actions>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ResetPassComponent } from './reset/reset-pass/reset-pass.component';\nimport { TweetListComponent } from './tweet-list/tweet-list.component';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { JwtGuard } from './services/jwt.guard';\n\n\nconst routes: Routes = [\n  { \n    path:\"\" , \n    redirectTo: \"/login\",\n    pathMatch:\"full\"\n  },\n  { \n    path: 'login', \n    component: LoginComponent \n  },\n  { \n    path: \"login/register\", \n    redirectTo: \"register\",\n    pathMatch: \"full\"\n  },\n  { \n    path: 'register', \n    component: RegisterComponent \n  },\n  { \n    path: 'home', \n    component: NavbarComponent,\n    canActivate:[JwtGuard],\n    children : \n    [\n      { \n        path:\"\" , \n        component: TweetListComponent,\n        canActivate:[JwtGuard],\n      },\n      {\n        path:\"tweets/all\",\n        component: TweetListComponent,\n        canActivate:[JwtGuard],\n      },\n      {\n        path: \"logout\",\n        redirectTo:\"/login\",\n        pathMatch:\"full\"\n        \n      },\n      { \n        path: 'user-list', \n        component: UserListComponent,\n        canActivate:[JwtGuard],\n      },\n      { \n        path: 'passwordReset/:username', \n        component: ResetPassComponent,\n        canActivate:[JwtGuard],\n      },\n    ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n} from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../interfaces/user';\nimport { Router } from '@angular/router';\ndeclare var $: any;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n  loginForm: FormGroup;\n  submitted: boolean = false;\n  resetSubmitted: boolean = false;\n  loading: boolean = false;\n  currentUser: User;\n  invalid = false;\n  resetPasswordForm: FormGroup;\n  resetPasswordValue: string;\n  passwordResetComplete: boolean = false;\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigateByUrl('home');\n    }\n\n    this.loginForm = this.formBuilder.group({\n      userName: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n\n    this.resetPasswordForm = this.formBuilder.group({\n      username: ['', Validators.required],\n    });\n  }\n\n  resetPasswordSubmit() {\n    this.resetSubmitted = true;\n    this.authService\n      .forgotPassword(this.resetPasswordForm.controls.username.value)\n      .subscribe((data: any) => {\n        if (\n          (data.resetStatus !== undefined || data.resetStatus !== null) &&\n          data.resetStatus == 'success'\n        ) {\n          this.resetPasswordValue = data.newPassword;\n        }\n        this.passwordResetComplete = true;\n      });\n  }\n\n  showResetPasswordModal() {\n    this.resetSubmitted = false;\n    $('#resetPasswordModal').modal('show');\n  }\n\n  hideResetPasswordModal() {\n    this.resetSubmitted = false;\n    $('#resetPasswordModal').modal('hide');\n  }\n\n  getUsername() {\n    return this.loginForm.get('userName').value;\n  }\n\n  getPassword() {\n    return this.loginForm.get('password').value;\n  }\n\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  onSubmit() {\n    console.log('Submitted');\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authService\n      .login(this.getUsername(), this.getPassword())\n      .subscribe((data: any) => {\n        if (data.loginStatus == 'success') {\n          this.currentUser = data.user;\n          console.log(this.currentUser);\n          this.authService.setCurrentUser(this.currentUser);\n          this.submitted = false;\n          this.router.navigateByUrl('home');\n        } else {\n          this.invalid = true;\n          this.loading = false;\n        }\n      });\n  }\n}\n","<div class=\"container-fluid px-1 px-md-5 px-lg-1 px-xl-5 py-5 mx-auto\">\n  <div class=\"card card0 border-0\">\n    <div class=\"row d-flex\">\n      <div class=\"col-lg-5\">\n        <div class=\"card1 pb-6\">\n          <div class=\"row\">\n            <img src=\"../../assets/logo.png\" class=\"logo\">\n          </div>\n          <div class=\"row px-3 justify-content-center mt-4 mb-5 border-line\">\n            <img src=\"../../assets/tweet-mainPage.jpg\" class=\"image\">\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-6\">\n        <div class=\"card2 card border-0 px-4 py-5\">\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"row mb-4 px-3\">\n              <h1 class=\"mb-0 mr-4 mt-2\">Welcome to Tweet Application</h1>\n            </div>\n            <div class=\"row px-3 mb-4\">\n              <div class=\"line\"></div>\n              <small class=\"or text-center\">Login</small>\n              <div class=\"line\"></div>\n            </div>\n            <div class=\"row px-3\">\n              <input type=\"text\" formControlName=\"userName\" class=\"user-input\" placeholder=\"Username\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.userName.errors }\" />\n              <div *ngIf=\"submitted && f.userName.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.userName.errors.required\">Username is required</div>\n              </div>\n            </div>\n            <div class=\"row px-3\">\n              <input type=\"password\" formControlName=\"password\" class=\"pass-input\" placeholder=\"Password\"\n                [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n              <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n              </div>\n            </div>\n           \n                  <div *ngIf=\"invalid\" class=\"text-danger\">\n                    <p>Invalid Credentials:( Please enter correct Username and Password</p>\n                  </div>\n            <div class=\"row mb-3 px-3\">\n              <button type=\"submit\" class=\"btn btn-blue text-center\">Login</button>\n            </div>\n            <div class=\"row mb-4 px-3\">\n              <small class=\"font-weight-bold\">Don't have an account? <a class=\"text-info\"\n                  routerLink=\"register\">Register</a></small>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"bg-blue py-4\">\n      <div class=\"row px-3\">\n        <small class=\"ml-4 ml-sm-5 mb-2\">Copyright &copy; 2022. All rights reserved.</small>\n      </div>\n    </div>\n  </div>\n</div>","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {  \r\n    \r\n    constructor(public auth: AuthService) {}  \r\n    \r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {  \r\n      \r\n    request = request.clone({  \r\n      setHeaders: {  \r\n        Authorization: `${this.auth.getToken()}`  \r\n      }  \r\n    });   \r\n    return next.handle(request);  \r\n  }  \r\n} ","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(private auth: AuthService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if (err.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                alert('You need to login first');\r\n                this.auth.logout();\r\n                location.reload();\r\n            }\r\n\r\n            const error = err.error.message || err.statusText;\r\n            return throwError(error);\r\n        }))\r\n    }\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}